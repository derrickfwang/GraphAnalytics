match (n) optional match (n) - [r] -() delete n, r;

LOAD CSV WITH HEADERS FROM "file:///c:/agm_NEs.csv" AS row
MERGE (O:Object {id: row.ID})
ON CREATE SET O.Category = row.Category, O.Name=row.NE;

MATCH (n)
WHERE n.Category = 'disease'
SET n:disease;

MATCH (n)
WHERE n.Category = 'gene'
SET n:gene;


MATCH (n)
WHERE n.Category = 'drug'
SET n:drug;

MATCH (n)
WHERE n.Category = 'mutation'
SET n:mutation;

MATCH (n)
WHERE n.Category = 'species'
SET n:species;

LOAD CSV WITH HEADERS FROM "file:///c:/agm_Relation.csv" AS row
MATCH (o1 { id:row.ID1 })
MATCH (o2 { id:row.ID2 })
MERGE (o1)-[r:correlate]->(o2)
on create set r.count = 1, r.sentence ='', r.pmid = row.pmid, r.sentence =  row.sentence
on match set r.count = r.count + 1, r.pmid = r.pmid + ", " + row.pmid, r.sentence = r.sentence +  "  ||  " + row.sentence


match (n:species)
with n.Name as Species, size((n)-[]-()) as NumConn
return Species, NumConn
order by NumConn DESC


match (n:species)-[r]-()
//where size((n)-[]-())=0
where n.Name = 'human'
delete n, r


match p = (n1:drug {Name:"agmatine"})-[r1]-(n2:gene)-[r2]-(n3:disease)
where r1.count >1 and r2.count >1
return p
//limit 50


// link prediction
MATCH (a:Node), (b:Node)
WHERE a <> b AND a.name < b.name AND not((a)-[:FRIENDS]-(b))
RETURN a.name, b.name, algo.linkprediction.adamicAdar(a, b) AS score
ORDER BY score DESC


MATCH (a:Node {name: 'C'})
MATCH (d:Node {name: 'E'})
RETURN algo.linkprediction.preferentialAttachment(a, d) AS score



match (n1:disease),(n2:gene),(n3:drug)
where (n1.Name =~ '.*hair.*' or n1.Name =~ '.*stress.*' or n1.Name in ['alopecia','aging'])
and not (n1)-[]-(n2)-[]-(n3)
return n1.Name as Disease, n2.Name as GeneName, n3.Name as DrugName
, algo.linkprediction.adamicAdar(n1, n2) + algo.linkprediction.adamicAdar(n2, n3) AS AdamicAdarScore
order by AdamicAdarScore DESC
limit 5


